// <auto-generated />
using System;
using ControleTiAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ControleTiAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230206232728_AddingHasBallunColumn")]
    partial class AddingHasBallunColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ti")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ControleTiAPI.Models.CellPhone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("memorySize")
                        .HasColumnType("int");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("operationalSystem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("processingUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("storageSize")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("cellPhone", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Chip", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("acctualICCID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("cellphoneId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("departmentId")
                        .HasColumnType("int");

                    b.Property<int?>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("updatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("id");

                    b.HasIndex("cellphoneId");

                    b.HasIndex("departmentId");

                    b.HasIndex("employeeId");

                    b.HasIndex("number")
                        .IsUnique()
                        .HasDatabaseName("ChipNumberIndex");

                    b.ToTable("chip", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Computer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("computerType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("departmentId")
                        .HasColumnType("int");

                    b.Property<int?>("employeeId")
                        .HasColumnType("int");

                    b.Property<bool>("isGood")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("lastPreventiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("memorySize")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operationalSystem")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("processorId")
                        .HasColumnType("int");

                    b.Property<int>("profileId")
                        .HasColumnType("int");

                    b.Property<int>("rankOperationalSystem")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("storageId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("CodeComputerIndex");

                    b.HasIndex("departmentId");

                    b.HasIndex("employeeId");

                    b.HasIndex("processorId");

                    b.HasIndex("profileId");

                    b.HasIndex("storageId");

                    b.ToTable("computer", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ComputerLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("computerId")
                        .HasColumnType("int");

                    b.Property<string>("computerProfile")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("isGood")
                        .HasColumnType("bit");

                    b.Property<int>("memorySize")
                        .HasColumnType("int");

                    b.Property<string>("operationalSystem")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("processingUnit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("storageSize")
                        .HasColumnType("int");

                    b.Property<string>("storageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("id");

                    b.HasIndex("computerId");

                    b.ToTable("computerLog", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ComputerMemory", b =>
                {
                    b.Property<int>("memoryId")
                        .HasColumnType("int");

                    b.Property<int>("computerId")
                        .HasColumnType("int");

                    b.Property<int>("qtde")
                        .HasColumnType("int");

                    b.HasKey("memoryId", "computerId");

                    b.HasIndex("computerId");

                    b.ToTable("computerMemory", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ComputerProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("memoryMinSize")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("rankOfOperationSystem")
                        .HasColumnType("int");

                    b.Property<int>("rankOfProcessingUnit")
                        .HasColumnType("int");

                    b.Property<int>("storageMinSize")
                        .HasColumnType("int");

                    b.Property<string>("storageType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("NameProfileIndex");

                    b.ToTable("profile", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.DVR", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("activeCams")
                        .HasColumnType("int");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("dvrIP")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("dvrPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("dvrPort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("dvrUser")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("hasBalun")
                        .HasColumnType("bit");

                    b.Property<double>("hdSize")
                        .HasColumnType("float");

                    b.Property<DateTime?>("lastPreventive")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qtdeChannels")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("CodeDVRIndex");

                    b.ToTable("dvr", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("enterprise")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("id");

                    b.ToTable("department", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Employee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("emailPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.HasIndex("departmentId");

                    b.HasIndex("email")
                        .IsUnique()
                        .HasDatabaseName("EmailEmployeeIndex");

                    b.ToTable("employee", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Memory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("memoryPentSize")
                        .HasColumnType("int");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.ToTable("memory", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.NetworkNode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patchPanelLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("patchPanelNodeId")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int?>("patchPanelPort")
                        .HasColumnType("int");

                    b.Property<int>("switchId")
                        .HasColumnType("int");

                    b.Property<int>("switchPort")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("CodeNetworkNodeIndex");

                    b.HasIndex("employeeId");

                    b.HasIndex("switchId");

                    b.ToTable("networkNode", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Nobreak", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isSenoidal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("lastPreventive")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qtdeVA")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int?>("typeOfUse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("CodeNobreakIndex");

                    b.ToTable("nobreak", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Printer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("printerIP")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("printerPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("printerUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("serialNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("supplies")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("PrinterCodeUniqueIndex");

                    b.ToTable("printer", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ProcessingUnit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("generation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("rankProcessingUnit")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("processingUnit", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Ramal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("deviceConfig")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("deviceIP")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("devicePassword")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("deviceUser")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int?>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("exitNumber")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("isDepartment")
                        .HasColumnType("bit");

                    b.Property<string>("model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("id");

                    b.HasIndex("departmentId");

                    b.HasIndex("employeeId");

                    b.HasIndex("number")
                        .IsUnique()
                        .HasDatabaseName("RamalNumberIndex");

                    b.ToTable("ramal", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Router", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("routerIP")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("routerMAC")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("routerPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("routerSSID")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("routerUser")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("CodeRouterIndex");

                    b.ToTable("router", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.SkypeEmployee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("skypePassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("skypeUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.HasIndex("skypeUser")
                        .IsUnique()
                        .HasDatabaseName("SkypeUserIndex");

                    b.ToTable("skypeEmployee", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Storage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("storageSize")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("storage", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Switches", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("assetNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qtdePorts")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("switchIP")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("switchMAC")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("switchPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("switchUser")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("CodeSwitchIndex");

                    b.ToTable("switches", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.VpnEmployee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("vpnPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("vpnUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.HasIndex("vpnUser")
                        .IsUnique()
                        .HasDatabaseName("VpnUserIndex");

                    b.ToTable("vpnEmployee", "ti");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Chip", b =>
                {
                    b.HasOne("ControleTiAPI.Models.CellPhone", "cellPhone")
                        .WithMany("chips")
                        .HasForeignKey("cellphoneId");

                    b.HasOne("ControleTiAPI.Models.Department", "department")
                        .WithMany("chips")
                        .HasForeignKey("departmentId");

                    b.HasOne("ControleTiAPI.Models.Employee", "employee")
                        .WithMany("chips")
                        .HasForeignKey("employeeId");

                    b.Navigation("cellPhone");

                    b.Navigation("department");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Computer", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Department", "department")
                        .WithMany("computers")
                        .HasForeignKey("departmentId");

                    b.HasOne("ControleTiAPI.Models.Employee", "employee")
                        .WithMany("computers")
                        .HasForeignKey("employeeId");

                    b.HasOne("ControleTiAPI.Models.ProcessingUnit", "processingUnit")
                        .WithMany("computers")
                        .HasForeignKey("processorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControleTiAPI.Models.ComputerProfile", "profile")
                        .WithMany("computers")
                        .HasForeignKey("profileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControleTiAPI.Models.Storage", "storage")
                        .WithMany("computers")
                        .HasForeignKey("storageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("employee");

                    b.Navigation("processingUnit");

                    b.Navigation("profile");

                    b.Navigation("storage");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ComputerLog", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Computer", "computer")
                        .WithMany("logs")
                        .HasForeignKey("computerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("computer");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ComputerMemory", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Computer", "computer")
                        .WithMany("memories")
                        .HasForeignKey("computerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleTiAPI.Models.Memory", "memory")
                        .WithMany("computers")
                        .HasForeignKey("memoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("computer");

                    b.Navigation("memory");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Employee", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Department", "department")
                        .WithMany("employees")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("ControleTiAPI.Models.NetworkNode", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Employee", "employeeNetworkNode")
                        .WithMany("networkNodes")
                        .HasForeignKey("employeeId");

                    b.HasOne("ControleTiAPI.Models.Switches", "switchOfNode")
                        .WithMany("networkNodes")
                        .HasForeignKey("switchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employeeNetworkNode");

                    b.Navigation("switchOfNode");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Ramal", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Department", "department")
                        .WithMany("ramals")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleTiAPI.Models.Employee", "employee")
                        .WithMany("ramals")
                        .HasForeignKey("employeeId");

                    b.Navigation("department");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("ControleTiAPI.Models.SkypeEmployee", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Employee", "employee")
                        .WithMany("skypeAccesses")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("ControleTiAPI.Models.VpnEmployee", b =>
                {
                    b.HasOne("ControleTiAPI.Models.Employee", "employee")
                        .WithMany("vpnAccesses")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("ControleTiAPI.Models.CellPhone", b =>
                {
                    b.Navigation("chips");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Computer", b =>
                {
                    b.Navigation("logs");

                    b.Navigation("memories");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ComputerProfile", b =>
                {
                    b.Navigation("computers");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Department", b =>
                {
                    b.Navigation("chips");

                    b.Navigation("computers");

                    b.Navigation("employees");

                    b.Navigation("ramals");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Employee", b =>
                {
                    b.Navigation("chips");

                    b.Navigation("computers");

                    b.Navigation("networkNodes");

                    b.Navigation("ramals");

                    b.Navigation("skypeAccesses");

                    b.Navigation("vpnAccesses");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Memory", b =>
                {
                    b.Navigation("computers");
                });

            modelBuilder.Entity("ControleTiAPI.Models.ProcessingUnit", b =>
                {
                    b.Navigation("computers");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Storage", b =>
                {
                    b.Navigation("computers");
                });

            modelBuilder.Entity("ControleTiAPI.Models.Switches", b =>
                {
                    b.Navigation("networkNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
